- 5 historias de usuario priorizadas:

    + Historia de Usuario 2: Autenticación y Gestión de Sesiones
        Controlador: auth

    Historia de Usuario 5: Publicación de Productos por Parte de los Vendedores
        Prioridad: Media
        Controlador: usuarios

    Historia de Usuario 7: Búsqueda de Productos
        Prioridad: Alta
        Controlador: productos

    + Historia de Usuario 8: Filtros Avanzados
        Lista de filtros:
            Por rango de precio
            Por puntuación
            Por más vendidos
            Recomendados al usuario (según su id)
            Por nombre
            Por familia
            Por fotoperiodo
            Por tipo de riego
            Por pet friendly
            Por color

    Historia de Usuario 9: Añadir Productos al Carrito de Compras
        Prioridad: Alta
        Controlador: carro-compras
    
    Historia de Usuario 10: Proceso de Checkout y Confirmación de Pedidos
        Prioridad: Alta
        Controlador: pedidos
    
    Historia de Usuario 12: Visualización del catálogo
        Prioridad: Alta
        Controlador: catalogo


    Módulo Equipo
        Controlador: equipo
        GET -> Path (), Path('plantai'), Path(':area')

---------------------------------------------------------------------------------------------

Entrega 5

En el repositorio Backend

a. Se deben priorizar 2 nuevas historias de usuario. La primera historia es donde se muestra 
al cliente el catálogo de productos. La segunda historia es el detalle del producto (donde se 
muestra la información de un producto específico). Si algunas de estas 2 nuevas historias ya 
estaban dentro de las 5 historias anteriores, se deben tomar otras historias hasta completar 7 
HU (desde ahora se trabajará sobre 7 historias). 

b. Sobre las nuevas 2 historias, implementar lo mismo que se solicitó anteriormente para las 
primeras 5 historias. En resumen, identificar los servicios, crear controllers, services y DTOs 
en los módulos que corresponda (utilizar los existentes o crear nuevos de ser necesario), 
entregar una respuesta genérica y documentar en el swagger. La respuesta genérica debe ser 
simulando una respuesta real de este servicio.

c. Tomando los endpoints creados para las 7 historias priorizadas, identificar las validaciones 
que se deben realizar sobre los campos de entrada (params, queries y body (DTO) - si aplica). 

d. Implementar las validaciones sobre los campos de entrada utilizando pipes. Las validaciones 
realizadas deben ser coherentes con las restricciones indicadas en la documentación de swagger. 

e. Por cada servicio, documentar en el swagger los códigos de error que apliquen para dicho servicio.

f. Crear un middleware y aplicarlo para todos los endpoints. Este middleware debe imprimir en 
consola los siguientes datos: path, method (GET, POST, etc) y body (si aplica).

g. Crear un interceptor y aplicarlo globalmente. Durante el flujo de salida, con la respuesta 
exitosa, se debe imprimir el resultado del servicio en la consola.

h. Crear un filtro de excepciones que atrape las HttpException y aplicarlo de forma global. 
Este filtro debe imprimir en la consola, el status http del error y el mensaje de la excepción.

i. No se pide implementar la lógica de los servicios. 
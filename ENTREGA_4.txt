- 5 historias de usuario priorizadas:

    Historia de Usuario 5: Publicación de Productos por Parte de los Vendedores
        Prioridad: Media
        Controlador: usuarios

    Historia de Usuario 7: Búsqueda de Productos
        Prioridad: Alta
        Controlador: productos

    Historia de Usuario 9: Añadir Productos al Carrito de Compras
        Prioridad: Alta
        Controlador: carro-compras
    
    Historia de Usuario 10: Proceso de Checkout y Confirmación de Pedidos
        Prioridad: Alta
        Controlador: pedidos
    
    Historia de Usuario 12: Visualización del catálogo
        Prioridad: Alta
        Controlador: catalogo

- Módulo "Equipo":
Controlador: "equipo"

    Gets:
    Path () -> Obtener la información completa del equipo.
    Path ('plantai') -> Obtener la información del ecommerce.
    Path (':area') -> Obtener información sobre áreas específicas del equipo (uxui, frontend, mobile, backend).


--- entrega 4 ----

5. En el repositorio Backend:

a. Tomar las primeras 5 historias priorizadas, identificar los servicios (endpoints)
que se deben construir asociados a dichas historias.

R: Controlador de cada accion y generar el servicio acorde ( que entrege un string )

b. Con los servicios identificados, crear los controllers, services, DTOs de entrada
y DTOs de salida (cuando aplique) correspondientes a esos endpoints. Cada
componente debe estar en el módulo de NestJS que le corresponde.

R: crear dto de entreda y salida

c. Cada servicio debe entregar una respuesta genérica de acuerdo al tipo de
salida identificado (DTO, string, number, etc). No se pide implementar la lógica
de los servicios.

R: generar un objeto ejemplo y retornarlo cuando corresponda 

d. Documentar los endpoints identificados (swagger). Cada módulo debe tener su
documentación por separado

R: documentar endpoints